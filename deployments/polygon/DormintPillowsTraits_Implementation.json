{
  "address": "0x0D36C9141D5FBfd53C15ec657110A0df99e91C69",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VRF_V2_WRAPPER",
      "outputs": [
        {
          "internalType": "contract VRFV2WrapperInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getTraits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "enum DormintPillowsTraits.PillowMouth",
              "name": "mouth",
              "type": "uint8"
            },
            {
              "internalType": "enum DormintPillowsTraits.PillowEyes",
              "name": "eyes",
              "type": "uint8"
            },
            {
              "internalType": "enum DormintPillowsTraits.PillowPattern",
              "name": "pattern",
              "type": "uint8"
            },
            {
              "internalType": "enum DormintPillowsTraits.PillowRarity",
              "name": "rarity",
              "type": "uint8"
            },
            {
              "internalType": "enum DormintPillowsTraits.PillowShape",
              "name": "shape",
              "type": "uint8"
            },
            {
              "internalType": "enum DormintPillowsTraits.PillowPompom",
              "name": "pompom",
              "type": "uint8"
            },
            {
              "internalType": "enum DormintPillowsTraits.PillowAnimal",
              "name": "animal",
              "type": "uint8"
            }
          ],
          "internalType": "struct DormintPillowsTraits.PillowTraits",
          "name": "traits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "link_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfV2Wrapper_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomnessRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords_",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x69d9fc56964fcb139379616edc8b51d506006fafb6b1550b64586c24d0b4948e",
  "receipt": {
    "to": null,
    "from": "0x6105412CfEA957869E9C9465e6f383b2D368B36D",
    "contractAddress": "0x0D36C9141D5FBfd53C15ec657110A0df99e91C69",
    "transactionIndex": 45,
    "gasUsed": "1067008",
    "logsBloom": "0x
    "blockHash": "0x68e263c7814e4776950c91b8d664d518a093891671b8d542cf88e713c88774f4",
    "transactionHash": "0x69d9fc56964fcb139379616edc8b51d506006fafb6b1550b64586c24d0b4948e",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 38795967,
        "transactionHash": "0x69d9fc56964fcb139379616edc8b51d506006fafb6b1550b64586c24d0b4948e",
        "address": "0x0D36C9141D5FBfd53C15ec657110A0df99e91C69",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 190,
        "blockHash": "0x68e263c7814e4776950c91b8d664d518a093891671b8d542cf88e713c88774f4"
      },
      {
        "transactionIndex": 45,
        "blockNumber": 38795967,
        "transactionHash": "0x69d9fc56964fcb139379616edc8b51d506006fafb6b1550b64586c24d0b4948e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006105412cfea957869e9c9465e6f383b2d368b36d",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000fec7d13e3c10000000000000000000000000000000000000000000000000003e6839c09103f03a00000000000000000000000000000000000000000000042be7b225762954177a0000000000000000000000000000000000000000000000003d6971ef52c7e03a00000000000000000000000000000000000000000000042be8b0ed476790277a",
        "logIndex": 191,
        "blockHash": "0x68e263c7814e4776950c91b8d664d518a093891671b8d542cf88e713c88774f4"
      }
    ],
    "blockNumber": 38795967,
    "cumulativeGasUsed": "8018465",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5c16f334d65c8fa6352346d26a90f98f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF_V2_WRAPPER\",\"outputs\":[{\"internalType\":\"contract VRFV2WrapperInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum DormintPillowsTraits.PillowMouth\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"enum DormintPillowsTraits.PillowEyes\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"enum DormintPillowsTraits.PillowPattern\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"internalType\":\"enum DormintPillowsTraits.PillowRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"enum DormintPillowsTraits.PillowShape\",\"name\":\"shape\",\"type\":\"uint8\"},{\"internalType\":\"enum DormintPillowsTraits.PillowPompom\",\"name\":\"pompom\",\"type\":\"uint8\"},{\"internalType\":\"enum DormintPillowsTraits.PillowAnimal\",\"name\":\"animal\",\"type\":\"uint8\"}],\"internalType\":\"struct DormintPillowsTraits.PillowTraits\",\"name\":\"traits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfV2Wrapper_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomnessRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords_\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"LINK()\":{\"notice\":\"--- BEGIN: V1 Storage Layout --- \"},\"getTraits(uint256)\":{\"notice\":\"PUBLIC GETTERS \"},\"requestRandomness()\":{\"notice\":\"PUBLIC SETTERS \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DormintPillowsTraits.sol\":\"DormintPillowsTraits\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x44f6fa0cb1867a0bc137a195d4603bafa1cf74ecfbe69eb82a5dabeca8957738\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/DormintPillowsTraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\\\";\\n\\ncontract DormintPillowsTraits is Initializable, OwnableUpgradeable {\\n    /** ENUMs & STRUCTs */\\n    enum PillowMouth { Happy, Confused, Sleepy, ExtremelyHappy, Neutral, Yawning, Satisfied, Surprised }\\n    enum PillowEyes { Happy, Confused, Sleepy, Closed, HalfAwake, Suspicious, Reflective, Winking }\\n    enum PillowPattern { XmasTrees, Leaves, Fishes, Cats, Owls, GeometricShapes, Giraffes, Bears }\\n    enum PillowRarity { Common, Uncommon, Rare, Epic, Legendary }\\n    enum PillowShape { Square, Circle, Triangle }\\n    enum PillowPompom { None, Type1, Type2, Type3 }\\n    enum PillowAnimal { None, Cat, Dog, Bird, Panda, Zebra }\\n\\n    struct PillowTraits {\\n        PillowMouth mouth;\\n        PillowEyes eyes;\\n        PillowPattern pattern;\\n        PillowRarity rarity;\\n        PillowShape shape;\\n        PillowPompom pompom;\\n        PillowAnimal animal;\\n    }\\n\\n    /** --- BEGIN: V1 Storage Layout --- */\\n    // Chainlink VRF\\n    LinkTokenInterface public LINK;\\n    VRFV2WrapperInterface public VRF_V2_WRAPPER;\\n    uint256 public randomnessRequestId;\\n    uint256 public randomWord;\\n    /** --- END: V1 Storage Layout --- */\\n\\n    /** INITIALIZATION */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address link_, address vrfV2Wrapper_) public initializer {\\n        __Ownable_init();\\n\\n        LINK = LinkTokenInterface(link_);\\n        VRF_V2_WRAPPER = VRFV2WrapperInterface(vrfV2Wrapper_);\\n    }\\n\\n    /** PUBLIC SETTERS */\\n    function requestRandomness() external onlyOwner {\\n        require(randomWord == 0, \\\"Randomness was already persisted\\\");\\n        uint32 callbackGasLimit = 300000;\\n        uint16 requestConfirmations = 5;\\n        uint32 numWords = 1;\\n        LINK.transferAndCall(\\n            address(VRF_V2_WRAPPER),\\n            VRF_V2_WRAPPER.calculateRequestPrice(callbackGasLimit),\\n            abi.encode(callbackGasLimit, requestConfirmations, numWords)\\n        );\\n        randomnessRequestId = VRF_V2_WRAPPER.lastRequestId();\\n    }\\n\\n    function rawFulfillRandomWords(uint256 requestId_, uint256[] memory randomWords_) external {\\n        require(_msgSender() == address(VRF_V2_WRAPPER), \\\"Only VRF V2 wrapper can fulfill\\\");\\n        require(requestId_ == randomnessRequestId, \\\"Wrong requestId\\\");\\n        randomWord = randomWords_[0];\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(_msgSender()).transfer(balance);\\n    }\\n\\n    function rescueFunds(address token_) external onlyOwner {\\n        IERC20Upgradeable token = IERC20Upgradeable(token_);\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(_msgSender(), balance);\\n    }\\n\\n    /** PUBLIC GETTERS */\\n    function getTraits(uint256 tokenId_) external view returns (bool available, PillowTraits memory traits) {\\n        traits = PillowTraits(\\n            PillowMouth(0),\\n            PillowEyes(0),\\n            PillowPattern(0),\\n            PillowRarity(0),\\n            PillowShape(0),\\n            PillowPompom(0),\\n            PillowAnimal(0)\\n        );\\n\\n        // If there is no provided randomness, return unavailable traits\\n        if (randomWord == 0) {\\n            return (false, traits);\\n        }\\n\\n        available = true;\\n\\n        uint256 probabilityBase = 100;\\n\\n        /** RARITY */\\n        // Rarity probability: 60%, 20%, 10%, 7%, 3%\\n        uint8[5] memory rarityProbability = [0, 60, 80, 90, 97];\\n\\n        uint256 randomWordByTokenId = uint256(keccak256(abi.encodePacked(randomWord, tokenId_)));\\n\\n        uint256 rarityRandom = randomWordByTokenId % probabilityBase;\\n        {\\n            // Default rarity: Legendary\\n            uint256 rarityIndex = uint256(PillowRarity.Legendary);\\n            // Check rarityRandom against probability and assign rarity index\\n            for (uint256 i = 0; i < rarityProbability.length - 1; i++) {\\n                if (rarityProbability[i] <= rarityRandom && rarityRandom < rarityProbability[i + 1]) {\\n                    rarityIndex = i;\\n                    break;\\n                }\\n            }\\n\\n            traits.rarity = PillowRarity(rarityIndex);\\n        }\\n\\n        /** MOUTH */\\n        // Offset random word\\n        randomWordByTokenId = randomWordByTokenId / probabilityBase;\\n        probabilityBase = uint8(PillowMouth.Surprised) + 1;\\n        {\\n            uint256 mouthIndex = randomWordByTokenId % probabilityBase;\\n            traits.mouth = PillowMouth(mouthIndex);\\n        }\\n\\n        /** EYES */\\n        // Offset random word\\n        randomWordByTokenId = randomWordByTokenId / probabilityBase;\\n        probabilityBase = uint8(PillowEyes.Winking) + 1;\\n        {\\n            uint256 eyesIndex = randomWordByTokenId % probabilityBase;\\n            traits.eyes = PillowEyes(eyesIndex);\\n        }\\n\\n        /** PATTERN */\\n        // Offset random word\\n        randomWordByTokenId = randomWordByTokenId / probabilityBase;\\n        probabilityBase = uint8(PillowPattern.Bears) + 1;\\n        {\\n            uint256 patternIndex = randomWordByTokenId % probabilityBase;\\n            traits.pattern = PillowPattern(patternIndex);\\n        }\\n\\n        /** SHAPE */\\n        // Offset random word\\n        randomWordByTokenId = randomWordByTokenId / probabilityBase;\\n        probabilityBase = uint8(PillowShape.Triangle) + 1;\\n        {\\n            uint256 shapeIndex = randomWordByTokenId % probabilityBase;\\n            traits.shape = PillowShape(shapeIndex);\\n        }\\n\\n        /** POMPOM */\\n        // Offset random word\\n        randomWordByTokenId = randomWordByTokenId / probabilityBase;\\n        probabilityBase = uint8(PillowPompom.Type3);\\n        if (\\n            traits.rarity == PillowRarity.Rare ||\\n            traits.rarity == PillowRarity.Epic ||\\n            traits.rarity == PillowRarity.Legendary\\n        ) {\\n            uint256 pompomIndex = randomWordByTokenId % probabilityBase;\\n            traits.pompom = PillowPompom(pompomIndex + 1);\\n        }\\n\\n        /** ANIMAL */\\n        // Offset random word\\n        randomWordByTokenId = randomWordByTokenId / probabilityBase;\\n        probabilityBase = uint8(PillowAnimal.Zebra);\\n        if (\\n            traits.rarity == PillowRarity.Epic ||\\n            traits.rarity == PillowRarity.Legendary\\n        ) {\\n            uint256 animalIndex = randomWordByTokenId % probabilityBase;\\n            traits.animal = PillowAnimal(animalIndex + 1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fc9960be4edc1e235af3c3f6a2f7d1c154bd407775f98acb9d0dff4f99f08db\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6111db806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063e53b201711610066578063e53b201714610198578063f2fde38b146101ab578063f5684183146101be578063f8413b07146101c757600080fd5b80638da5cb5b14610153578063d929c97f14610164578063e1dc07611461017757600080fd5b80631b6b6d23146100d45780631fe543e314610104578063286a70aa146101195780633ccfd60b14610130578063485cc95514610138578063715018a61461014b575b600080fd5b6065546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610117610112366004610da8565b6101cf565b005b61012260675481565b6040519081526020016100fb565b61011761029f565b610117610146366004610e8e565b6102da565b61011761041d565b6033546001600160a01b03166100e7565b6066546100e7906001600160a01b031681565b61018a610185366004610ec1565b610431565b6040516100fb929190610f24565b6101176101a6366004610fd0565b61091b565b6101176101b9366004610fd0565b610a19565b61012260685481565b610117610a92565b6066546001600160a01b0316336001600160a01b0316146102375760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c792056524620563220777261707065722063616e2066756c66696c6c0060448201526064015b60405180910390fd5b606754821461027a5760405162461bcd60e51b815260206004820152600f60248201526e15dc9bdb99c81c995c5d595cdd1259608a1b604482015260640161022e565b8060008151811061028d5761028d610ff2565b60200260200101516068819055505050565b6102a7610c87565b6040514790339082156108fc029083906000818181858888f193505050501580156102d6573d6000803e3d6000fd5b5050565b600054610100900460ff16158080156102fa5750600054600160ff909116105b806103145750303b158015610314575060005460ff166001145b6103775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161022e565b6000805460ff19166001179055801561039a576000805461ff0019166101001790555b6103a2610ce1565b606580546001600160a01b038086166001600160a01b03199283161790925560668054928516929091169190911790558015610418576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b610425610c87565b61042f6000610d10565b565b60006104736040805160e08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000905290565b6040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090506068546000036104c35760009150915091565b6040805160a0810182526000808252603c602080840191909152605083850152605a60608085019190915260616080850152606854855192830152938101879052600195506064930160408051601f19818403018152919052805160209091012090506000610532848361101e565b9050600460005b61054560016005611048565b8110156105b6578285826005811061055f5761055f610ff2565b602002015160ff161115801561059757508461057c826001611061565b6005811061058c5761058c610ff2565b602002015160ff1683105b156105a4578091506105b6565b806105ae81611074565b915050610539565b508060048111156105c9576105c9610eda565b866060019060048111156105df576105df610eda565b908160048111156105f2576105f2610eda565b9052506106019050848361108d565b915061060f600760016110a1565b60ff1693506000610620858461101e565b905080600781111561063457610634610eda565b8690600781111561064757610647610eda565b9081600781111561065a5761065a610eda565b9052506106699050848361108d565b9150610677600760016110a1565b60ff1693506000610688858461101e565b905080600781111561069c5761069c610eda565b866020019060078111156106b2576106b2610eda565b908160078111156106c5576106c5610eda565b9052506106d49050848361108d565b91506106e2600760016110a1565b60ff16935060006106f3858461101e565b905080600781111561070757610707610eda565b8660400190600781111561071d5761071d610eda565b9081600781111561073057610730610eda565b90525061073f9050848361108d565b915061074d600260016110a1565b60ff169350600061075e858461101e565b905080600281111561077257610772610eda565b8660800190600281111561078857610788610eda565b9081600281111561079b5761079b610eda565b9052506107aa9050848361108d565b9150600360ff1693506002856060015160048111156107cb576107cb610eda565b14806107ec57506003856060015160048111156107ea576107ea610eda565b145b8061080c575060048560600151600481111561080a5761080a610eda565b145b1561086957600061081d858461101e565b905061082a816001611061565b600381111561083b5761083b610eda565b8660a00190600381111561085157610851610eda565b9081600381111561086457610864610eda565b905250505b610873848361108d565b9150600560ff16935060038560600151600481111561089457610894610eda565b14806108b557506004856060015160048111156108b3576108b3610eda565b145b156109125760006108c6858461101e565b90506108d3816001611061565b60058111156108e4576108e4610eda565b8660c0019060058111156108fa576108fa610eda565b9081600581111561090d5761090d610eda565b905250505b50505050915091565b610923610c87565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906110ba565b90506001600160a01b03821663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156109ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1391906110d3565b50505050565b610a21610c87565b6001600160a01b038116610a865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022e565b610a8f81610d10565b50565b610a9a610c87565b60685415610aea5760405162461bcd60e51b815260206004820181905260248201527f52616e646f6d6e6573732077617320616c726561647920706572736973746564604482015260640161022e565b6065546066546040516310c1b4d560e21b8152620493e060048201819052926005926001926001600160a01b0392831692634000aea09216908190634306d35490602401602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f91906110ba565b6040805163ffffffff808a16602083015261ffff89169282019290925290861660608201526080016040516020818303038152906040526040518463ffffffff1660e01b8152600401610bc4939291906110f5565b6020604051808303816000875af1158015610be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0791906110d3565b50606660009054906101000a90046001600160a01b03166001600160a01b031663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f91906110ba565b606755505050565b6033546001600160a01b0316331461042f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161022e565b600054610100900460ff16610d085760405162461bcd60e51b815260040161022e9061115a565b61042f610d62565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610d895760405162461bcd60e51b815260040161022e9061115a565b61042f33610d10565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610dbb57600080fd5b8235915060208084013567ffffffffffffffff80821115610ddb57600080fd5b818601915086601f830112610def57600080fd5b813581811115610e0157610e01610d92565b8060051b604051601f19603f83011681018181108582111715610e2657610e26610d92565b604052918252848201925083810185019189831115610e4457600080fd5b938501935b82851015610e6257843584529385019392850192610e49565b8096505050505050509250929050565b80356001600160a01b0381168114610e8957600080fd5b919050565b60008060408385031215610ea157600080fd5b610eaa83610e72565b9150610eb860208401610e72565b90509250929050565b600060208284031215610ed357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60088110610a8f57610a8f610eda565b60048110610f1057610f10610eda565b9052565b60068110610f1057610f10610eda565b82151581528151610100820190610f3a81610ef0565b806020840152506020830151610f4f81610ef0565b806040840152506040830151610f6481610ef0565b80606084015250606083015160058110610f8057610f80610eda565b80608084015250608083015160038110610f9c57610f9c610eda565b8060a08401525060a0830151610fb560c0840182610f00565b5060c0830151610fc860e0840182610f14565b509392505050565b600060208284031215610fe257600080fd5b610feb82610e72565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261102d5761102d611008565b500690565b634e487b7160e01b600052601160045260246000fd5b8181038181111561105b5761105b611032565b92915050565b8082018082111561105b5761105b611032565b60006001820161108657611086611032565b5060010190565b60008261109c5761109c611008565b500490565b60ff818116838216019081111561105b5761105b611032565b6000602082840312156110cc57600080fd5b5051919050565b6000602082840312156110e557600080fd5b81518015158114610feb57600080fd5b60018060a01b038416815260006020848184015260606040840152835180606085015260005b818110156111375785810183015185820160800152820161111b565b506000608082860101526080601f19601f83011685010192505050949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220670a72bee5377b1dadc4f0ce1b9fc90f9713c57bacfa48e514c44c6d5893039764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "LINK()": {
        "notice": "--- BEGIN: V1 Storage Layout --- "
      },
      "getTraits(uint256)": {
        "notice": "PUBLIC GETTERS "
      },
      "requestRandomness()": {
        "notice": "PUBLIC SETTERS "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 260,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 263,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 825,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 252,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 912,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "LINK",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(LinkTokenInterface)94"
      },
      {
        "astId": 915,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "VRF_V2_WRAPPER",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(VRFV2WrapperInterface)121"
      },
      {
        "astId": 917,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "randomnessRequestId",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 919,
        "contract": "contracts/DormintPillowsTraits.sol:DormintPillowsTraits",
        "label": "randomWord",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LinkTokenInterface)94": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VRFV2WrapperInterface)121": {
        "encoding": "inplace",
        "label": "contract VRFV2WrapperInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}